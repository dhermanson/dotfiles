snippet beforefeature "BeforeFeature"
/**
 * @BeforeFeature
 */
public static function beforeSuite(BeforeFeatureScope $scope) {
	$1
}
endsnippet

snippet bst "BeforeSuite"
/**
 * @BeforeSuite
 */
public static function beforeSuite(BeforeSuiteScope $scope) {
	$1
}
endsnippet

snippet aftersuite "AfterSuite"
/**
 * @AfterSuite
 */
public static function afterSuite(AfterSuiteScope $scope) {
	$1
}
endsnippet

snippet bsc "BeforeScenario"
/**
 * @BeforeScenario
 */
public static function BeforeScenario(BeforeScenarioScope $scope) {
	$1
}
endsnippet

snippet asc "AfterScenario"
/**
 * @AfterScenario
 */
public static function AfterScenario(AfterScenarioScope $scope) {
	$1
}
endsnippet

#--------------------- Routing --------------------------------------------
snippet rgetc "Route::get"
Route::get('${1:path}', '${2:Random}Controller@${3:method}');
endsnippet

snippet rpostc "Route::post"
Route::post('${1:path}', '${2:Random}Controller@${3:method}');
endsnippet
#--------------------------------------------------------------------------

snippet comment "Pretty Comment"
/*
|--------------------------------------------------------------------------
| ${1:Heading}
|--------------------------------------------------------------------------
|
| ${2:body}
|
*/
endsnippet

snippet bado "Be A Double Of"
$${1:obj}->beADoubleOf('${2:type}');
endsnippet

snippet bcw "Be constructed with"
$this->beConstructedWith($${1:obj});
endsnippet

snippet t "$this"
$this->
endsnippet

snippet psy "PsySh"
eval(\Psy\sh());
endsnippet

snippet prif "Private Field"
/**
 * ${2:description}
 */
private $${1:name};

endsnippet

snippet auto "Require autoload"
require './vendor/autoload.php';
endsnippet

snippet php "<?php"
<?php


endsnippet

snippet ast "Assert"
\PHPUnit_Framework_Assert::$1
endsnippet

snippet setup "PHPUnit Setup"
public function setUp() {
	parent::setUp();
	$1
}
endsnippet

snippet tm "Test Method"
/** @test */
public function ${1:somethingAwesome}() {
	${2:$this->assertTrue(true);}
}
endsnippet

snippet modelfactory "Model Factory"
$factory->define(${1:ModelName}::class, function(Faker\Generator $faker) {
	return [
	];
});
endsnippet

snippet f.create "Create an instance of faker"
$faker = \Faker\Factory::create()
endsnippet

snippet f.fname "$faker->firstName"
$faker->firstName
endsnippet

snippet f.lname "$faker->lastName"
$faker->lastName
endsnippet

snippet f.postcode "$faker->postcode"
$faker->postcode
endsnippet

snippet f.email "$faker->email"
$faker->email
endsnippet

snippet f.phone "$faker->phoneNumber"
$faker->phoneNumber
endsnippet

snippet f.bool "$faker->boolean()"
$faker->boolean($1)
endsnippet

snippet f.rel "$faker->randomElement()"
$faker->randomElement([${1:'element1', 'element2'}])
endsnippet

snippet f.num "$faker->randomNumber()"
$faker->randomNumber($1)
endsnippet

snippet f.word "$faker->word"
$faker->word
endsnippet
