snippet cs "Comment Section"
//////////////////////////////////////////////////
//        $1
//////////////////////////////////////////////////
endsnippet
snippet beforefeature "BeforeFeature"
/**
 * @BeforeFeature
 */
public static function beforeSuite(BeforeFeatureScope $scope) {
	$1
}
endsnippet

snippet bst "BeforeSuite"
/**
 * @BeforeSuite
 */
public static function beforeSuite(BeforeSuiteScope $scope) {
	$1
}
endsnippet

snippet aftersuite "AfterSuite"
/**
 * @AfterSuite
 */
public static function afterSuite(AfterSuiteScope $scope) {
	$1
}
endsnippet

snippet bsc "BeforeScenario"
/**
 * @BeforeScenario
 */
public static function BeforeScenario(BeforeScenarioScope $scope) {
	$1
}
endsnippet

snippet asc "AfterScenario"
/**
 * @AfterScenario
 */
public static function AfterScenario(AfterScenarioScope $scope) {
	$1
}
endsnippet

snippet afterstep "AfterStep"
/**
 * @AfterStep
 */
public static function AfterStep(AfterStepScope $scope) {
	$1
}
endsnippet

#--------------------- Routing --------------------------------------------
snippet rgetc "Route::get"
Route::get('${1:path}', '${2:Random}Controller@${3:method}');
endsnippet

snippet rpostc "Route::post"
Route::post('${1:path}', '${2:Random}Controller@${3:method}');
endsnippet
#--------------------------------------------------------------------------

snippet comment "Pretty Comment"
/*
|--------------------------------------------------------------------------
| ${1:Heading}
|--------------------------------------------------------------------------
|
| ${2:body}
|
*/
endsnippet

snippet bado "Be A Double Of"
$${1:obj}->beADoubleOf('${2:type}');
endsnippet

snippet bcw "Be constructed with"
$this->beConstructedWith($${1:obj});
endsnippet

snippet t "$this"
$this->
endsnippet

snippet psy "PsySh"
eval(\Psy\sh());
endsnippet

snippet prif "Private Field"
/**
 * ${2:description}
 */
private $${1:name};

endsnippet

snippet auto "Require autoload"
require './vendor/autoload.php';
endsnippet

snippet php "<?php"
<?php


endsnippet

snippet ast "Assert"
\PHPUnit_Framework_Assert::$1
endsnippet

snippet setup "PHPUnit Setup"
public function setUp() {
	parent::setUp();
	$1
}
endsnippet

snippet tm "Test Method"
/** @test */
public function ${1:somethingAwesome}() {
	${2:$this->assertTrue(true);}
}
endsnippet

snippet modelfactory "Model Factory"
$factory->define(${1:ModelName}::class, function(Faker\Generator $faker) {
	return [
	];
});
endsnippet

snippet f.create "Create an instance of faker"
$faker = \Faker\Factory::create()
endsnippet

snippet f.fname "$faker->firstName"
$faker->firstName
endsnippet

snippet f.lname "$faker->lastName"
$faker->lastName
endsnippet

snippet f.postcode "$faker->postcode"
$faker->postcode
endsnippet

snippet f.email "$faker->email"
$faker->email
endsnippet

snippet f.phone "$faker->phoneNumber"
$faker->phoneNumber
endsnippet

snippet f.bool "$faker->boolean()"
$faker->boolean($1)
endsnippet

snippet f.rel "$faker->randomElement()"
$faker->randomElement([${1:'element1', 'element2'}])
endsnippet

snippet f.num "$faker->randomNumber()"
$faker->randomNumber($1)
endsnippet

snippet f.word "$faker->word"
$faker->word
endsnippet

snippet fkey "Blueprint foreign key"
$table->foreign('${1:table}_id')->references('id')->on('$1s');
endsnippet

snippet hm "HasMany"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasMany
 */
public function ${1:relation_name}() {
	return $this->hasMany('$3');
}
endsnippet

snippet mm "MorphMany"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphMany
 */
public function ${1:relation_name}() {
	return $this->morphMany('$3');
}
endsnippet

snippet mt "MorphTo"
/**
 * Get the owning $1 models.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphTo
 */
public function ${1:relation_name}() {
	return $this->morphTo();
}
endsnippet

snippet mtm "MorphToMany"
/**
 * Get all of the $1 for the $3
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
 */
public function ${1:relation_name}() {
	return $this->morphToMany('$4', '$2');
}
endsnippet

snippet mo "MorphOne"
/**
 * Get the $1 for this $3
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphOne
 */
public function ${1:relation_name}() {
	return $this->morphOne('$4', '$2');
}
endsnippet

snippet hmt "HasManyThrough"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasManyThrough
 */
public function ${1:relation_name}() {
	return $this->hasManyThrough('$e', '$4');
}
endsnippet

snippet btm "BelongsToMany"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
 */
public function ${1:relation_name}() {
	return $this->belongsToMany('$3');
}
endsnippet

snippet bt "BelongsTo"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
 */
public function ${1:relation_name}() {
	return $this->belongsTo('$3');
}
endsnippet

snippet '(\$[a-zA-Z0-9]+)' "->" r
`!p
snip.rv = match.group(1)`->${1:method}($2)
endsnippet

snippet '[)]\s*' "->" r
)->${1:method}($2)
endsnippet

snippet '^(\s*-)' "->" r
`!p
snip.rv = match.group(1)`>${1:method}($2)
endsnippet
