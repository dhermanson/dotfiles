snippet bado "Be A Double Of"
$${1:obj}->beADoubleOf('${2:type}');
endsnippet

snippet bcw "Be constructed with"
$this->beConstructedWith($${1:obj});
endsnippet

snippet t "$this"
$this->
endsnippet

snippet psy "PsySh"
eval(\Psy\sh());
endsnippet

snippet prif "Private Field"
/**
 * ${2:description}
 */
private $${1:name};

endsnippet

snippet auto "Require autoload"
require './vendor/autoload.php';
endsnippet

snippet php "<?php"
<?php


endsnippet

snippet setup "PHPUnit Setup"
public function setUp() {
	$1
}
endsnippet

snippet tm "Test Method"
public function test${1:SomethingAwesome}() {
	${2:$this->assertTrue(true);}
}
endsnippet

snippet modelfactory "Model Factory"
$factory->define(${1:ModelName}::class, function(Faker\Generator $faker) {
	return [
	];
});
endsnippet

snippet f.fname "$faker->firstName"
$faker->firstName
endsnippet

snippet f.lname "$faker->lastName"
$faker->lastName
endsnippet

snippet f.postcode "$faker->postcode"
$faker->postcode
endsnippet

snippet f.email "$faker->email"
$faker->email
endsnippet

snippet f.phone "$faker->phoneNumber"
$faker->phoneNumber
endsnippet

snippet f.bool "$faker->boolean()"
$faker->boolean($1)
endsnippet

snippet f.rel "$faker->randomElement()"
$faker->randomElement([${1:'element1', 'element2'}])
endsnippet
